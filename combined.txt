--- clean.py ---
import torch
torch.cuda.empty_cache()


--- manage.py ---
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


--- script.py ---
import os

def combine_files_by_suffix(suffix, exclude_dirs=None, output_file='combined.txt', use_relative_path=True):
    """
    Рекурсивно проходит по текущей директории и объединяет содержимое файлов с заданным суффиксом.
    
    :param suffix: Расширение файлов для поиска, например '.txt' или '.suffix'
    :param exclude_dirs: Список названий папок, которые нужно исключить из поиска
    :param output_file: Имя файла, в который будет записан результат
    :param use_relative_path: Если True — выводит относительный путь, иначе — абсолютный
    """
    if exclude_dirs is None:
        exclude_dirs = ['venv']

    current_dir = os.getcwd()
    output_path = os.path.join(current_dir, output_file)

    with open(output_path, 'w', encoding='utf-8') as outfile:
        for root, dirs, files in os.walk(current_dir):
            # Исключаем нужные папки
            dirs[:] = [d for d in dirs if d not in exclude_dirs and not any(d.startswith(excl) for excl in exclude_dirs)]

            for file in files:
                if file.endswith(suffix):
                    file_path = os.path.join(root, file)
                    try:
                        # Вычисляем путь для вывода
                        if use_relative_path:
                            display_path = os.path.relpath(file_path, current_dir)
                        else:
                            display_path = file_path

                        with open(file_path, 'r', encoding='utf-8') as infile:
                            content = infile.read()
                            outfile.write(f"--- {display_path} ---\n")
                            outfile.write(content + '\n\n')
                    except Exception as e:
                        print(f"Ошибка при чтении файла {file_path}: {e}")

    print(f"Файлы с суффиксом '{suffix}' успешно объединены в '{output_path}'.")

# Пример вызова функции
combine_files_by_suffix('.py')

--- accounts\admin.py ---
from django.contrib import admin

# Register your models here.


--- accounts\apps.py ---
from django.apps import AppConfig


class AccountsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'accounts'


--- accounts\models.py ---
from django.contrib.auth.models import AbstractUser
from django.db import models


class CustomUser(AbstractUser):
    # Остальные поля и методы кастомной модели пользователя

    groups = models.ManyToManyField(
        'auth.Group',
        related_name='customuser_set',  # Уникальное имя для реверсной связи
        blank=True
    )

    user_permissions = models.ManyToManyField(
        'auth.Permission',
        related_name='customuser_permissions',  # Уникальное имя для реверсной связи
        blank=True
    )

# Create your models here.


--- accounts\serializers.py ---
from django.contrib.auth import get_user_model
from rest_framework import serializers

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = get_user_model()
        fields = ['id', 'username', 'email']


--- accounts\tests.py ---
from django.test import TestCase

# Create your tests here.


--- accounts\views.py ---
from django.shortcuts import render
from django.contrib.auth import get_user_model
from rest_framework import generics
from rest_framework_simplejwt.tokens import RefreshToken
from .serializers import UserSerializer

class RegisterView(generics.CreateAPIView):
    queryset = get_user_model().objects.all()
    serializer_class = UserSerializer

class LoginView(generics.GenericAPIView):
    serializer_class = UserSerializer

    def post(self, request, *args, **kwargs):
        user = authenticate(username=request.data['username'], password=request.data['password'])
        if user is not None:
            refresh = RefreshToken.for_user(user)
            return Response({
                'refresh': str(refresh),
                'access': str(refresh.access_token),
            })
        else:
            return Response({"detail": "Invalid credentials"}, status=400)

# Create your views here.


--- accounts\__init__.py ---


--- accounts\migrations\0001_initial.py ---
# Generated by Django 5.1.4 on 2024-12-09 03:19

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, related_name='customuser_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='customuser_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]


--- accounts\migrations\__init__.py ---


--- models\admin.py ---
from django.contrib import admin

# Register your models here.


--- models\apps.py ---
from django.apps import AppConfig


class ModelsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'models'


--- models\models.py ---
from django.db import models


class GeneratedModel(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField()
    file = models.FileField(upload_to='generated_models/')
    likes = models.PositiveIntegerField(default=0)

    def __str__(self):
        return self.name





# Create your models here.


--- models\nerual_network.py ---
import os
import subprocess
from diffusers import DiffusionPipeline
import torch


def generate_model(prompt):
    # Настройка путей
    current_dir = os.path.dirname(__file__)  # Папка, где расположен этот скрипт
    stable_fast_3d_dir = os.path.abspath(os.path.join(current_dir, '..', '..', 'stable-fast-3d'))
    demo_files_dir = os.path.join(stable_fast_3d_dir, 'demo_files', 'examples')
    output_dir = os.path.join(demo_files_dir, 'output')
    input_image_path = os.path.join(demo_files_dir, 'generated_image.jpg')

    # Этап 1: Генерация 2D-изображения с помощью DeepFloyd
    try:
        print("Loading DeepFloyd model...")
        pipe = DiffusionPipeline.from_pretrained("DeepFloyd/IF-I-XL-v1.0", variant="fp16", torch_dtype=torch.float16)
        pipe = pipe.to("cuda" if torch.cuda.is_available() else "cpu")

        # Генерация изображения
        print(f"Generating image for prompt: {prompt}")
        image = pipe(prompt).images[0]

        # Сохранение изображения в папку demo_files/examples
        os.makedirs(demo_files_dir, exist_ok=True)
        image.save(input_image_path)
        print(f"Image saved to {input_image_path}")
    except Exception as e:
        return f"Error during image generation: {str(e)}"

    # Этап 2: Генерация 3D-модели с помощью Stable Fast 3D
    try:
        # Путь к скрипту run.py
        script_path = os.path.join(stable_fast_3d_dir, 'run.py')

        # Настройка параметров команды
        pretrained_model = 'stabilityai/stable-fast-3d'
        device = 'cuda' if torch.cuda.is_available() else 'cpu'
        texture_resolution = 512
        batch_size = 1

        # Команда для запуска Stable Fast 3D
        command = [
            'python', script_path,
            '--device', device,
            '--pretrained-model', pretrained_model,
            '--output-dir', output_dir,
            '--texture-resolution', str(texture_resolution),
            '--batch_size', str(batch_size),
            input_image_path
        ]

        print(f"Running Stable Fast 3D with command: {' '.join(command)}")
        result = subprocess.run(command, capture_output=True, text=True)

        if result.returncode == 0:
            print("3D model generation successful!")
            return f"3D model generated successfully! Output saved to {output_dir}"
        else:
            return f"Error during 3D model generation: {result.stderr}"
    except Exception as e:
        return f"Error during 3D model generation: {str(e)}"


--- models\serializers.py ---
from rest_framework import serializers
from .models import GeneratedModel

class GeneratedModelSerializer(serializers.ModelSerializer):
    class Meta:
        model = GeneratedModel
        fields = ['id', 'name', 'description', 'file', 'likes']


--- models\tests.py ---
from django.test import TestCase

# Create your tests here.


--- models\urls.py ---
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import GeneratedModelViewSet, generate_model

router = DefaultRouter()
router.register(r'generated_models', GeneratedModelViewSet)

from django.urls import path
from . import views

urlpatterns = [
    path('generate_model/', views.generate_model, name='generate_model'),
]



--- models\views.py ---
from rest_framework import viewsets
from .models import GeneratedModel
from .serializers import GeneratedModelSerializer
from rest_framework.decorators import api_view
from rest_framework.response import Response
from .nerual_network import generate_model
from .models import GeneratedModel


class GeneratedModelViewSet(viewsets.ModelViewSet):
    queryset = GeneratedModel.objects.all()
    serializer_class = GeneratedModelSerializer



@api_view(['POST'])
def generate_model_view(request):
    input_data = request.data.get('input')
    result = generate_model(input_data)
    generated_model = GeneratedModel.objects.create(name="Generated Model", file=result)
    return Response({"model": generated_model.id, "file": result})


--- models\__init__.py ---


--- models\migrations\0001_initial.py ---
# Generated by Django 5.1.4 on 2024-12-09 02:06

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, related_name='customuser_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='customuser_permissions_set', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='GeneratedModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('file', models.FileField(upload_to='generated_models/')),
                ('likes', models.PositiveIntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]


--- models\migrations\0002_remove_generatedmodel_user_and_more.py ---
# Generated by Django 5.1.4 on 2024-12-09 03:19

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('models', '0001_initial'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='generatedmodel',
            name='user',
        ),
        migrations.AddField(
            model_name='generatedmodel',
            name='description',
            field=models.TextField(default=''),
            preserve_default=False,
        ),
        migrations.DeleteModel(
            name='CustomUser',
        ),
    ]


--- models\migrations\__init__.py ---


--- myproject\asgi.py ---
"""
ASGI config for myproject project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')

application = get_asgi_application()


--- myproject\settings.py ---
"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-n0p$zh-$#mryn_-79q$k@(fy7pl_54pb*=r66$*bkw5+-!niy0'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []
CORS_ALLOW_ALL_ORIGINS = True



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'accounts',
    'models',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


--- myproject\urls.py ---
from django.contrib import admin
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from models.views import GeneratedModelViewSet, generate_model_view
from accounts.views import RegisterView, LoginView

router = DefaultRouter()
router.register(r'generated_models', GeneratedModelViewSet)

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/register/', RegisterView.as_view(), name='register'),
    path('api/login/', LoginView.as_view(), name='login'),
    path('api/', include(router.urls)),
    path('api/generate_model/', generate_model_view, name='generate_model'),

]


--- myproject\wsgi.py ---
"""
WSGI config for myproject project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')

application = get_wsgi_application()


--- myproject\__init__.py ---


